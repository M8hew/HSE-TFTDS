// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// PostCasJSONBody defines parameters for PostCas.
type PostCasJSONBody struct {
	Key      string `json:"key"`
	NewValue string `json:"new_value"`
	OldValue string `json:"old_value"`
}

// PostKeysJSONBody defines parameters for PostKeys.
type PostKeysJSONBody struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// PutKeysKeyJSONBody defines parameters for PutKeysKey.
type PutKeysKeyJSONBody struct {
	Value string `json:"value"`
}

// PostCasJSONRequestBody defines body for PostCas for application/json ContentType.
type PostCasJSONRequestBody PostCasJSONBody

// PostKeysJSONRequestBody defines body for PostKeys for application/json ContentType.
type PostKeysJSONRequestBody PostKeysJSONBody

// PutKeysKeyJSONRequestBody defines body for PutKeysKey for application/json ContentType.
type PutKeysKeyJSONRequestBody PutKeysKeyJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostCasWithBody request with any body
	PostCasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCas(ctx context.Context, body PostCasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeysWithBody request with any body
	PostKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeys(ctx context.Context, body PostKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKeysKey request
	DeleteKeysKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeysKey request
	GetKeysKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKeysKeyWithBody request with any body
	PutKeysKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKeysKey(ctx context.Context, key string, body PutKeysKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostCasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCas(ctx context.Context, body PostCasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeys(ctx context.Context, body PostKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeysKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeysKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeysKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeysKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKeysKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKeysKeyRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKeysKey(ctx context.Context, key string, body PutKeysKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKeysKeyRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostCasRequest calls the generic PostCas builder with application/json body
func NewPostCasRequest(server string, body PostCasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCasRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCasRequestWithBody generates requests for PostCas with any type of body
func NewPostCasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeysRequest calls the generic PostKeys builder with application/json body
func NewPostKeysRequest(server string, body PostKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeysRequestWithBody generates requests for PostKeys with any type of body
func NewPostKeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKeysKeyRequest generates requests for DeleteKeysKey
func NewDeleteKeysKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeysKeyRequest generates requests for GetKeysKey
func NewGetKeysKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKeysKeyRequest calls the generic PutKeysKey builder with application/json body
func NewPutKeysKeyRequest(server string, key string, body PutKeysKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKeysKeyRequestWithBody(server, key, "application/json", bodyReader)
}

// NewPutKeysKeyRequestWithBody generates requests for PutKeysKey with any type of body
func NewPutKeysKeyRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostCasWithBodyWithResponse request with any body
	PostCasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCasResponse, error)

	PostCasWithResponse(ctx context.Context, body PostCasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCasResponse, error)

	// PostKeysWithBodyWithResponse request with any body
	PostKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeysResponse, error)

	PostKeysWithResponse(ctx context.Context, body PostKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeysResponse, error)

	// DeleteKeysKeyWithResponse request
	DeleteKeysKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteKeysKeyResponse, error)

	// GetKeysKeyWithResponse request
	GetKeysKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetKeysKeyResponse, error)

	// PutKeysKeyWithBodyWithResponse request with any body
	PutKeysKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKeysKeyResponse, error)

	PutKeysKeyWithResponse(ctx context.Context, key string, body PutKeysKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKeysKeyResponse, error)
}

type PostCasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeysKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKeysKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeysKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeysKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetKeysKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeysKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKeysKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKeysKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKeysKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostCasWithBodyWithResponse request with arbitrary body returning *PostCasResponse
func (c *ClientWithResponses) PostCasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCasResponse, error) {
	rsp, err := c.PostCasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCasResponse(rsp)
}

func (c *ClientWithResponses) PostCasWithResponse(ctx context.Context, body PostCasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCasResponse, error) {
	rsp, err := c.PostCas(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCasResponse(rsp)
}

// PostKeysWithBodyWithResponse request with arbitrary body returning *PostKeysResponse
func (c *ClientWithResponses) PostKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeysResponse, error) {
	rsp, err := c.PostKeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeysResponse(rsp)
}

func (c *ClientWithResponses) PostKeysWithResponse(ctx context.Context, body PostKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeysResponse, error) {
	rsp, err := c.PostKeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeysResponse(rsp)
}

// DeleteKeysKeyWithResponse request returning *DeleteKeysKeyResponse
func (c *ClientWithResponses) DeleteKeysKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteKeysKeyResponse, error) {
	rsp, err := c.DeleteKeysKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeysKeyResponse(rsp)
}

// GetKeysKeyWithResponse request returning *GetKeysKeyResponse
func (c *ClientWithResponses) GetKeysKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetKeysKeyResponse, error) {
	rsp, err := c.GetKeysKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeysKeyResponse(rsp)
}

// PutKeysKeyWithBodyWithResponse request with arbitrary body returning *PutKeysKeyResponse
func (c *ClientWithResponses) PutKeysKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKeysKeyResponse, error) {
	rsp, err := c.PutKeysKeyWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKeysKeyResponse(rsp)
}

func (c *ClientWithResponses) PutKeysKeyWithResponse(ctx context.Context, key string, body PutKeysKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKeysKeyResponse, error) {
	rsp, err := c.PutKeysKey(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKeysKeyResponse(rsp)
}

// ParsePostCasResponse parses an HTTP response from a PostCasWithResponse call
func ParsePostCasResponse(rsp *http.Response) (*PostCasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKeysResponse parses an HTTP response from a PostKeysWithResponse call
func ParsePostKeysResponse(rsp *http.Response) (*PostKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteKeysKeyResponse parses an HTTP response from a DeleteKeysKeyWithResponse call
func ParseDeleteKeysKeyResponse(rsp *http.Response) (*DeleteKeysKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeysKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeysKeyResponse parses an HTTP response from a GetKeysKeyWithResponse call
func ParseGetKeysKeyResponse(rsp *http.Response) (*GetKeysKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeysKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutKeysKeyResponse parses an HTTP response from a PutKeysKeyWithResponse call
func ParsePutKeysKeyResponse(rsp *http.Response) (*PutKeysKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKeysKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Compare-And-Swap (CAS) operation
	// (POST /cas)
	PostCas(ctx echo.Context) error
	// Create a new key-value pair
	// (POST /keys)
	PostKeys(ctx echo.Context) error
	// Delete a key and its value
	// (DELETE /keys/{key})
	DeleteKeysKey(ctx echo.Context, key string) error
	// Retrieve the value of a key
	// (GET /keys/{key})
	GetKeysKey(ctx echo.Context, key string) error
	// Update the value for an existing key
	// (PUT /keys/{key})
	PutKeysKey(ctx echo.Context, key string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCas converts echo context to params.
func (w *ServerInterfaceWrapper) PostCas(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCas(ctx)
	return err
}

// PostKeys converts echo context to params.
func (w *ServerInterfaceWrapper) PostKeys(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostKeys(ctx)
	return err
}

// DeleteKeysKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteKeysKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", ctx.Param("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteKeysKey(ctx, key)
	return err
}

// GetKeysKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeysKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", ctx.Param("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKeysKey(ctx, key)
	return err
}

// PutKeysKey converts echo context to params.
func (w *ServerInterfaceWrapper) PutKeysKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", ctx.Param("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutKeysKey(ctx, key)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/cas", wrapper.PostCas)
	router.POST(baseURL+"/keys", wrapper.PostKeys)
	router.DELETE(baseURL+"/keys/:key", wrapper.DeleteKeysKey)
	router.GET(baseURL+"/keys/:key", wrapper.GetKeysKey)
	router.PUT(baseURL+"/keys/:key", wrapper.PutKeysKey)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTW/bMAz9KwJPG+B8dO1lvmUpMBS5FM26S1sMnM0kamxJk6hmRuD/PkhK26Rx0XZL",
	"dzJgk4/ke0+01lDo2mhFih3k6zYDqWYa8jWU5AorDUutIIeRcLI2FYnR+ZmYaStqVDiXai5QLKnp3WHl",
	"STjWlvriWk29MdqyE+OLy1OhDVkMQE6gKsVY1wYt9Uaq7E1XaMSH8Wj6Ucy8KkIQVpKb/rWCDFhyRZDD",
	"hJre91hhytriPLYBGdyRdam/o/6wP4Q2A21IoZGQw3F/2D+GDAzyIswGgwLj02jH4fnQ1lkJOZxrx2N0",
	"kIGlX54cf9FlE8IKrZhUzEBjKlnEnMGtC4XX4IoF1RhxbUBkSbHKkmI2NyZM4NhKNQ8NKlr9iGx1ftVV",
	"+ezXNrUmLZWQX8UC2wnb0DfZfbL+eUsFQ7ubzdZTfOGMVi41/Gk43Nc9se58UZBzM19VjXArNIbK0O3J",
	"8GQ/ZUKNUJrFTHu1ifq8HzUeTR99IWYoKypF6UmwFslMtXQ1crGIgztf12ibkNjtngesGD5YUvOC1pMQ",
	"8d5iv0nKf5HuqFuHwhIylTsCPitJSMDKEpaNoN/SsXtKfUQTKBSttk69QWkfWR+sl9S0Cb0ipn32T+P7",
	"wP8kzm3QYk1M1kF+9bSpbwsKpYItNnhhRUEej3XwPNaBq8TgLkvZllxP+b95jfkDIaloF4MvW3+HvDR1",
	"WpdxDUp2yekBbk4dNv1K/HaWLLGVdPe+PP2/Y9JxFro21P3UBxDqYgMleEGbVaRnSbeAZ3zXQvF/oZQ3",
	"JR7Uz4fYZK/cWAf+zQQ9Eh0HEPAyAm3JF+4rqNJOC1eWqGTbtn8CAAD//yw+Yfv9CAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
